{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alessandromusetta\\\\node-app\\\\cultura-estelar\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport bbox from \"@turf/bbox\";\nimport center from \"@turf/center\";\nimport bboxPolygon from '@turf/bbox-polygon';\nimport CelestialMap from './CelestialMap';\nimport Card from './Card';\nimport IntroPopup from \"./IntroPopup\";\nimport logo from './assets/images/stellarstories.png';\nimport sampleStories from './assets/samplestories';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.getPointsFromStories = stories => {\n      //get unique points only\n      const points = stories.reduce((accumulator, story) => {\n        story.points.map(storyPoint => {\n          if (!accumulator.some(point => point.id === storyPoint.id)) {\n            accumulator.push(storyPoint);\n          }\n        });\n        return accumulator;\n      }, []);\n      const pointObj = {\n        type: \"FeatureCollection\",\n        features: points\n      };\n      return pointObj;\n    };\n    this.filterMap = () => {\n      // Build Filter Map for Dropdowns\n      // {category name: array of items}\n      let filterMap = {};\n      this.state.filterOptions.sort().map(category => {\n        switch (category) {\n          case \"Name\":\n            {\n              // first category: Name\n              const regionSet = new Set(this.state.sourceStories.map(story => {\n                return story.points.map(point => point.properties.region);\n              }).flat());\n              filterMap[category] = Array.from(regionSet).filter(item => item).sort();\n              break;\n            }\n          case \"Type of Celestial Body\":\n            {\n              // second category: Type of Celestial Body\n              const typeOfPlaceSet = new Set(this.state.sourceStories.map(story => {\n                return story.points.map(point => point.properties.type_of_place);\n              }).flat());\n              filterMap[category] = Array.from(typeOfPlaceSet).filter(item => item).sort();\n              break;\n            }\n          case \"Speaker\":\n            {\n              // third category: Speaker\n              const speakerSet = new Set(this.state.sourceStories.map(story => {\n                return story.speakers.map(speaker => speaker.name);\n              }).flat());\n              filterMap[category] = Array.from(speakerSet).filter(item => item).sort();\n              break;\n            }\n          case \"Topic\":\n            {\n              // fourth category: Topic\n              const topicSet = new Set(this.state.sourceStories.map(story => story.topic).flat());\n              filterMap[category] = Array.from(topicSet).filter(item => item).sort();\n              break;\n            }\n          case \"Language\":\n            {\n              // fifth category: Language\n              const languageSet = new Set(this.state.sourceStories.map(story => story.language).flat());\n              filterMap[category] = Array.from(languageSet).filter(item => item).sort();\n              break;\n            }\n          case \"Speaker Community\":\n            {\n              // sixth category: Speaker Community\n              const communitySet = new Set(this.state.sourceStories.map(story => {\n                return story.speakers.map(speaker => speaker.speaker_community);\n              }).flat());\n              filterMap[category] = Array.from(communitySet).filter(item => item).sort();\n              break;\n            }\n        }\n      });\n      return filterMap;\n    };\n    this.handleFilter = (category, item) => {\n      let filteredStories = [];\n      switch (category) {\n        case \"Name\":\n          {\n            // first category: Name\n            filteredStories = this.state.sourceStories.filter(story => {\n              if (story.points.some(point => {\n                return point.properties.region && point.properties.region.toLowerCase() === item.toLowerCase();\n              })) {\n                return story;\n              }\n            });\n            break;\n          }\n        case \"Type of Celestial Body\":\n          {\n            // second category: type of celestial body\n            filteredStories = this.state.sourceStories.filter(story => {\n              if (story.points.some(point => {\n                return point.properties[\"type_of_place\"] && point.properties[\"type_of_place\"].toLowerCase() === item.toLowerCase();\n              })) {\n                return story;\n              }\n            });\n            break;\n          }\n        case \"Speaker\":\n          {\n            // third category: speaker name\n            filteredStories = this.state.sourceStories.filter(story => {\n              if (story.speakers.some(speaker => {\n                return speaker.name && speaker.name.toLowerCase() === item.toLowerCase();\n              })) {\n                return story;\n              }\n            });\n            break;\n          }\n        case \"Topic\":\n          {\n            // fourth category: topic\n            filteredStories = this.state.sourceStories.filter(story => {\n              if (story.topic) {\n                return story.topic && story.topic.toLowerCase() === item.toLowerCase();\n              }\n            });\n            break;\n          }\n        case \"Language\":\n          {\n            // fifth category: language\n            filteredStories = this.state.sourceStories.filter(story => {\n              if (story.language) {\n                return story.language && story.language.toLowerCase() === item.toLowerCase();\n              }\n            });\n            break;\n          }\n        case \"Speaker Community\":\n          {\n            // sixth category: community\n            filteredStories = this.state.sourceStories.filter(story => story.speakers.some(speaker => speaker.speaker_community && speaker.speaker_community.toLowerCase() === item.toLowerCase())).map(story => {\n              let n = Object.assign({}, story);\n              n.speakers = n.speakers.filter(speaker => speaker.speaker_community && speaker.speaker_community.toLowerCase() === item.toLowerCase());\n              return n;\n            });\n            break;\n          }\n      }\n      if (filteredStories) {\n        const filteredPoints = this.getPointsFromStories(filteredStories);\n        const bounds = bbox(filteredPoints);\n        const bboxPoly = bboxPolygon(bounds);\n        const centerPoint = center(bboxPoly).geometry.coordinates;\n        const framedView = {\n          center: [centerPoint[0], centerPoint[1], 0]\n        };\n        var activePoint = this.state.activePoint;\n        if (activePoint && !filteredPoints.features.some(point => point.id === activePoint.id)) {\n          activePoint = null;\n        }\n        this.setState({\n          stories: filteredStories,\n          points: filteredPoints,\n          framedView,\n          activePoint\n        });\n      }\n    };\n    this.handleFilterCategoryChange = option => {\n      if (option === null) {\n        this.resetStoriesAndMap();\n      } else {\n        const category = option.value;\n        this.setState({\n          filterCategory: category,\n          itemOptions: this.filterMap()[category]\n        });\n      }\n    };\n    this.handleFilterItemChange = option => {\n      if (option === null) {\n        this.resetStoriesAndMap();\n      } else if (this.state.filterCategory !== null) {\n        const item = option.value;\n        this.handleFilter(this.state.filterCategory, item);\n        this.setState({\n          filterItem: item\n        });\n      }\n    };\n    this.showMapPointStories = stories => {\n      let storyTitles = stories.map(story => story.title);\n      let filteredStories = [];\n      filteredStories = this.state.sourceStories.filter(story => storyTitles.includes(story.title));\n      if (filteredStories) {\n        this.setState({\n          stories: filteredStories,\n          activeStory: filteredStories[0]\n        });\n      }\n    };\n    this.handleStoriesChanged = stories => {\n      this.setState({\n        stories: stories\n      });\n    };\n    this.handleStoryClick = story => {\n      // set active to first point in story\n      const point = story.points[0];\n      const framedView = {\n        center: [point.geometry.coordinates[0], point.geometry.coordinates[1], 0]\n      };\n      this.setState({\n        activePoint: point,\n        activeStory: story,\n        framedView\n      });\n    };\n    this.resetStoriesAndMap = () => {\n      const points = this.getPointsFromStories(sampleStories);\n      this.setState({\n        stories: sampleStories,\n        points: points,\n        framedView: {\n          center: [this.state.centerLong, this.state.centerLat, 0]\n        },\n        activePoint: null,\n        activeStory: null,\n        filterCategory: \"Select category\",\n        filterItem: \"Select option\",\n        itemOptions: []\n      });\n    };\n    // build category list based that excludes empty category sets\n    this.buildFilterCategories = () => {\n      const variableCategories = this.state.filterOptions;\n      let categories = this.filterMap();\n      Object.keys(categories).map(cat => {\n        if (categories[cat].length === 0 && variableCategories.includes(cat)) {\n          delete categories[cat];\n        }\n      });\n      let filteredCategories = Object.keys(categories);\n      return filteredCategories;\n    };\n    this.state = {\n      framedView: null,\n      // store information about how view should be laid out\n      points: {},\n      sourceStories: sampleStories,\n      stories: sampleStories,\n      activePoint: null,\n      activeStory: null,\n      filterOptions: [\"Name\", \"Type of Celestial Body\", \"Speaker\", \"Topic\", \"Language\", \"Speaker Community\"],\n      filterCategory: \"Select category\",\n      filterItem: \"Select option\",\n      itemOptions: [],\n      zoom: 1.25,\n      centerLong: -120,\n      centerLat: -35,\n      logoPath: logo\n    };\n  }\n  componentDidMount() {\n    const points = this.getPointsFromStories(this.state.stories);\n    this.setState({\n      points: points\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CelestialMap, {\n        points: this.state.points,\n        clearFilteredStories: this.resetStoriesAndMap,\n        activePoint: this.state.activePoint,\n        framedView: this.state.framedView,\n        centerLat: this.state.centerLat,\n        centerLong: this.state.centerLong,\n        zoom: this.state.zoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        activeStory: this.state.activeStory,\n        stories: this.state.stories,\n        handleStoriesChanged: this.handleStoriesChanged,\n        categories: this.buildFilterCategories(),\n        filterMap: this.filterMap(),\n        handleFilter: this.handleFilter,\n        clearFilteredStories: this.resetStoriesAndMap,\n        onStoryClick: this.handleStoryClick,\n        logo_path: this.state.logoPath,\n        filterCategory: this.state.filterCategory,\n        filterItem: this.state.filterItem,\n        handleFilterCategoryChange: this.handleFilterCategoryChange,\n        handleFilterItemChange: this.handleFilterItemChange,\n        itemOptions: this.state.itemOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IntroPopup, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","bbox","center","bboxPolygon","CelestialMap","Card","IntroPopup","logo","sampleStories","jsxDEV","_jsxDEV","App","constructor","props","getPointsFromStories","stories","points","reduce","accumulator","story","map","storyPoint","some","point","id","push","pointObj","type","features","filterMap","state","filterOptions","sort","category","regionSet","Set","sourceStories","properties","region","flat","Array","from","filter","item","typeOfPlaceSet","type_of_place","speakerSet","speakers","speaker","name","topicSet","topic","languageSet","language","communitySet","speaker_community","handleFilter","filteredStories","toLowerCase","n","Object","assign","filteredPoints","bounds","bboxPoly","centerPoint","geometry","coordinates","framedView","activePoint","setState","handleFilterCategoryChange","option","resetStoriesAndMap","value","filterCategory","itemOptions","handleFilterItemChange","filterItem","showMapPointStories","storyTitles","title","includes","activeStory","handleStoriesChanged","handleStoryClick","centerLong","centerLat","buildFilterCategories","variableCategories","categories","keys","cat","length","filteredCategories","zoom","logoPath","componentDidMount","render","Fragment","children","clearFilteredStories","fileName","_jsxFileName","lineNumber","columnNumber","onStoryClick","logo_path"],"sources":["C:/Users/alessandromusetta/node-app/cultura-estelar/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\n\nimport bbox from \"@turf/bbox\";\nimport center from \"@turf/center\";\nimport bboxPolygon from '@turf/bbox-polygon'\n\nimport CelestialMap from './CelestialMap';\nimport Card from './Card';\nimport IntroPopup from \"./IntroPopup\";\n\nimport logo from './assets/images/stellarstories.png';\nimport sampleStories from './assets/samplestories';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      framedView: null, // store information about how view should be laid out\n      points: {},\n      sourceStories: sampleStories,\n      stories: sampleStories,\n      activePoint: null,\n      activeStory: null,\n      filterOptions: [\"Name\", \"Type of Celestial Body\", \"Speaker\", \"Topic\", \"Language\", \"Speaker Community\"],\n      filterCategory: \"Select category\",\n      filterItem: \"Select option\",\n      itemOptions: [],\n      zoom: 1.25,\n      centerLong: -120,\n      centerLat: -35,\n      logoPath: logo\n    };\n  }\n\n  componentDidMount() {\n    const points = this.getPointsFromStories(this.state.stories);\n    this.setState({ points: points });\n  }\n\n  getPointsFromStories = stories => {\n    //get unique points only\n    const points = stories.reduce((accumulator, story) => {\n      story.points.map(storyPoint => {\n        if (!accumulator.some(point => point.id === storyPoint.id)) {\n          accumulator.push(storyPoint);\n        }\n      });\n      return accumulator;\n    }, []);\n\n    const pointObj = {\n      type: \"FeatureCollection\",\n      features: points\n    };\n    return pointObj;\n  };\n\n  filterMap = () => {\n    // Build Filter Map for Dropdowns\n    // {category name: array of items}\n    let filterMap = {};\n    this.state.filterOptions.sort().map(category => {\n      switch (category) {\n        case \"Name\": {\n          // first category: Name\n          const regionSet = new Set(\n            this.state.sourceStories\n              .map(story => {\n                return story.points.map(point => point.properties.region);\n              })\n              .flat()\n          );\n          filterMap[category] = Array.from(regionSet).filter(item => item).sort();\n          break;\n        }\n        case \"Type of Celestial Body\": {\n          // second category: Type of Celestial Body\n          const typeOfPlaceSet = new Set(\n            this.state.sourceStories\n              .map(story => {\n                return story.points.map(\n                  point => point.properties.type_of_place\n                );\n              })\n              .flat()\n          );\n          filterMap[category] = Array.from(typeOfPlaceSet).filter(item => item).sort();\n          break;\n        }\n        case \"Speaker\": {\n          // third category: Speaker\n          const speakerSet = new Set(\n            this.state.sourceStories\n              .map(story => {\n                return story.speakers.map(speaker => speaker.name);\n              })\n              .flat()\n          );\n          filterMap[category] = Array.from(speakerSet).filter(item => item).sort();\n          break;\n        }\n        case \"Topic\": {\n          // fourth category: Topic\n          const topicSet = new Set(\n            this.state.sourceStories\n              .map(story => story.topic)\n              .flat()\n          );\n          filterMap[category] = Array.from(topicSet).filter(item => item).sort();\n          break;\n        }\n        case \"Language\": {\n          // fifth category: Language\n          const languageSet = new Set(\n            this.state.sourceStories\n              .map(story => story.language)\n              .flat()\n          );\n          filterMap[category] = Array.from(languageSet).filter(item => item).sort();\n          break;\n        }\n        case \"Speaker Community\": {\n          // sixth category: Speaker Community\n          const communitySet = new Set(\n            this.state.sourceStories\n            .map(story => {\n              return story.speakers.map(speaker => speaker.speaker_community);\n            })\n            .flat()\n          );\n          filterMap[category] = Array.from(communitySet).filter(item => item).sort();\n          break;\n        }\n      }\n    });\n    return filterMap;\n  };\n\n  handleFilter = (category, item) => {\n    let filteredStories = [];\n    switch (category) {\n      case \"Name\": {\n        // first category: Name\n        filteredStories = this.state.sourceStories.filter(story => {\n          if (\n            story.points.some(point => {\n              return (\n                point.properties.region &&\n                point.properties.region.toLowerCase() === item.toLowerCase()\n              );\n            })\n          ) {\n            return story;\n          }\n        });\n        break;\n      }\n      case \"Type of Celestial Body\": {\n        // second category: type of celestial body\n        filteredStories = this.state.sourceStories.filter(story => {\n          if (\n            story.points.some(point => {\n              return (\n                point.properties[\"type_of_place\"] &&\n                point.properties[\"type_of_place\"].toLowerCase() ===\n                  item.toLowerCase()\n              );\n            })\n          ) {\n            return story;\n          }\n        });\n        break;\n      }\n      case \"Speaker\": {\n        // third category: speaker name\n        filteredStories = this.state.sourceStories.filter(story => {\n          if (\n            story.speakers.some(speaker => {\n              return (\n                speaker.name &&\n                speaker.name.toLowerCase() === item.toLowerCase()\n              );\n            })\n          ) {\n            return story;\n          }\n        });\n        break;\n      }\n      case \"Topic\": {\n        // fourth category: topic\n        filteredStories = this.state.sourceStories.filter(story => {\n            if (story.topic) {\n              return (\n                story.topic &&\n                story.topic.toLowerCase() === item.toLowerCase()\n              )\n            }\n        });\n        break;\n      }\n      case \"Language\": {\n        // fifth category: language\n        filteredStories = this.state.sourceStories.filter(story => {\n            if (story.language) {\n              return (\n                story.language &&\n                story.language.toLowerCase() === item.toLowerCase()\n              )\n            }\n        });\n        break;\n      }\n      case \"Speaker Community\": {\n        // sixth category: community\n        filteredStories = this.state.sourceStories\n          .filter((story) => story.speakers\n            .some(speaker => speaker.speaker_community && speaker.speaker_community.toLowerCase() === item.toLowerCase())\n          )\n          .map(story => {\n            let n = Object.assign({}, story)\n            n.speakers = n.speakers\n              .filter(speaker => speaker.speaker_community && speaker.speaker_community.toLowerCase() === item.toLowerCase())\n              return n\n            });\n        break;\n      }\n    }\n    if (filteredStories) {\n      const filteredPoints = this.getPointsFromStories(filteredStories);\n\n      const bounds = bbox(filteredPoints);\n      const bboxPoly = bboxPolygon(bounds);\n      const centerPoint = center(bboxPoly).geometry.coordinates;\n      const framedView = {\n        center: [centerPoint[0], centerPoint[1], 0]\n      };\n\n      var activePoint = this.state.activePoint;\n      if (activePoint && !filteredPoints.features.some(point => point.id === activePoint.id)) {\n          activePoint = null;\n      }\n\n      this.setState({\n        stories: filteredStories,\n        points: filteredPoints,\n        framedView,\n        activePoint\n      });\n    }\n  };\n\n  handleFilterCategoryChange = option => {\n    if (option === null) {\n      this.resetStoriesAndMap();\n    } else {\n      const category = option.value;\n      this.setState({ filterCategory: category, itemOptions: this.filterMap()[category] })\n    }\n  }\n\n  handleFilterItemChange = option => {\n    if (option === null) {\n      this.resetStoriesAndMap();\n    } else if (this.state.filterCategory !== null) {\n      const item = option.value;\n      this.handleFilter(this.state.filterCategory, item);\n      this.setState({ filterItem: item });\n    }\n  }\n\n  showMapPointStories = stories => {\n    let storyTitles = stories.map(story => story.title);\n    let filteredStories = [];\n    filteredStories = this.state.sourceStories.filter(story =>\n      storyTitles.includes(story.title)\n    );\n    if (filteredStories) {\n      this.setState({\n        stories: filteredStories,\n        activeStory: filteredStories[0]\n      });\n    }\n  };\n\n  handleStoriesChanged = stories => {\n    this.setState({ stories: stories });\n  };\n\n  handleStoryClick = story => {\n    // set active to first point in story\n    const point = story.points[0];\n    const framedView = { center: [point.geometry.coordinates[0], point.geometry.coordinates[1], 0] };\n    this.setState({ activePoint: point, activeStory: story, framedView });\n  };\n\n  resetStoriesAndMap = () => {\n    const points = this.getPointsFromStories(sampleStories);\n    this.setState({\n      stories: sampleStories,\n      points: points,\n      framedView: { center: [this.state.centerLong, this.state.centerLat, 0]},\n      activePoint: null,\n      activeStory: null,\n      filterCategory: \"Select category\",\n      filterItem: \"Select option\",\n      itemOptions: [],\n    });\n  };\n\n  // build category list based that excludes empty category sets\n  buildFilterCategories = () => {\n    const variableCategories = this.state.filterOptions;\n    let categories = this.filterMap();\n\n    Object.keys(categories).map(cat => {\n      if (categories[cat].length === 0 && variableCategories.includes(cat)) {\n        delete categories[cat]\n      }\n    })\n    let filteredCategories = Object.keys(categories)\n    return filteredCategories\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <CelestialMap\n          points={this.state.points}\n          clearFilteredStories={this.resetStoriesAndMap}\n          activePoint={this.state.activePoint}\n          framedView={this.state.framedView}\n          centerLat={this.state.centerLat}\n          centerLong={this.state.centerLong}\n          zoom={this.state.zoom}\n        />\n        <Card\n          activeStory={this.state.activeStory}\n          stories={this.state.stories}\n          handleStoriesChanged={this.handleStoriesChanged}\n          categories={this.buildFilterCategories()}\n          filterMap={this.filterMap()}\n          handleFilter={this.handleFilter}\n          clearFilteredStories={this.resetStoriesAndMap}\n          onStoryClick={this.handleStoryClick}\n          logo_path={this.state.logoPath}\n          filterCategory={this.state.filterCategory}\n          filterItem={this.state.filterItem}\n          handleFilterCategoryChange={this.handleFilterCategoryChange}\n          handleFilterItemChange={this.handleFilterItemChange}\n          itemOptions={this.state.itemOptions}\n        />\n        <IntroPopup />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}